steps:
# - name: 'ubuntu:latest'
#   entrypoint: 'bash'
#   args:
#   - '-c'
#   - |
#     export VAR1=DATABASE_PERSISTENCE_POLICY_UNSPECIFIED
#     export VAR2=INFO

#     cat applicationIntegration/testing1/dev/overrides/overrides.json

#     apt-get update && apt-get -y install gettext-base
#     envsubst < applicationIntegration/testing1/dev/overrides/overrides.json > temp.json

#     cat temp.json

#     mv temp.json /workspace/applicationIntegration/testing1/dev/overrides/overrides.json
    
#     cat /workspace/applicationIntegration/testing1/dev/overrides/overrides.json

#     ls

# - name: 'us-docker.pkg.dev/appintegration-toolkit/images/integrationcli:latest'
#   entrypoint: 'sh'
#   args:
#     - '-c'
#     - |

      # ls

      # cat applicationIntegration/testing1/dev/overrides/overrides.json

# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |
#       chmod +x ./script.sh
#       ./script.sh

# - name: 'ubuntu'
#   args: ['bash', './subs.sh']
#   secretEnv: ['USERNAME', 'PASSWORD']

# - name: gcr.io/$PROJECT_ID/envsubst
#   args: ["env.json"]
#   env:
#   - 'BUILD_ID=$BUILD_ID'
#   - 'PROJECT_ID=$PROJECT_ID'
#   secretEnv: ['USERNAME', 'PASSWORD']

# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   args:
#     - gcloud
#     - functions
#     - deploy
#     - helloWorld123
#     - --region=us-central1
#     - --source=cloudFunction
#     - --trigger-http
#     - --runtime=nodejs20
#     - --service-account=$_TESTING_VARIABLE
#     - --entry-point=hey
#     - --set-env-vars
#     - SLACK_WEBHOOK_URL=$$WEBHOOK_URL, TESTING_VARIABLE=$_TESTING_VARIABLE
#     - --gen2
#   secretEnv: ['WEBHOOK_URL']
    

# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |      
#       # Generate the token and store it in a file
#       # gcloud auth application-default print-access-token > /workspace/access_token.txt

#       # Set multiple variables
#       token=$(gcloud auth print-access-token) 
#       region="us-central1"
#       base_resource_name="projects/$PROJECT_ID/locations/$region"
#       api_url="https://integrations.googleapis.com/v1"
#       base_api_url="https://integrations.googleapis.com/v1/$base_resource_name"
      
#       # Write variables to a file
#       echo "token=${token}" >> /workspace/env_vars.txt
#       echo "region=${region}" >> /workspace/env_vars.txt
#       echo "base_resource_name=${base_resource_name}" >> /workspace/env_vars.txt
#       echo "api_url=${api_url}" >> /workspace/env_vars.txt
#       echo "base_api_url=${base_api_url}" >> /workspace/env_vars.txt
      
#       # Display the generated token (optional)
#       cat /workspace/env_vars.txt

# - name: 'gcr.io/cloud-builders/npm'
#   entrypoint: 'node'
#   args: ['./scripts/testing.js']

# - id: 'step1'
#   name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args: ['./scripts/step1.sh']

# - id: 'step2'
#   name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args: ['./scripts/step2.sh']
#   waitFor: ['step1']

# - id: 'step3'
#   name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args: ['./scripts/step3.sh']
#   waitFor: ['step2']
  
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |
#       # Authenticate to Google Cloud
#       gcloud auth configure-docker us-docker.pkg.dev
      
#       # Set multiple variables
#       token=$(gcloud auth print-access-token) 
#       region="us-central1"
      
#       # Write variables to a file
#       echo "token=${token}" >> /workspace/env_vars.txt
#       echo "region=${region}" >> /workspace/env_vars.txt

# - name: 'us-docker.pkg.dev/appintegration-toolkit/images/integrationcli:latest'
#   entrypoint: 'sh'
#   args:
#     - '-c'
#     - |

#       ls

#       # Load the variables
#       source /workspace/env_vars.txt
      
#       # Run the integrationcli command
#       integrationcli prefs set -p "$PROJECT_ID" -r "$region" -t "$token" 
#       # integrationcli integrations list

#       # integrationcli integrations apply -f ./applicationIntegration/testing1 -e dev --verbose --wait=true
#       integrationcli integrations apply -f ./applicationIntegration/testing2 -e dev --verbose --wait=true

# - name: 'gcr.io/cloud-builders/git'
#   entrypoint: 'sh'
#   args:
#     - '-c'
#     - |
#       if git diff --quiet HEAD^ HEAD -- cloudFunction/; then
#         echo "checking=false" >> /workspace/env_vars.txt
#       else
#         echo "checking=true" >> /workspace/env_vars.txt
#       fi

# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   entrypoint: 'sh'
#   args:
#     - '-c'
#     - |
#       source /workspace/env_vars.txt
#       if [ "$checking" = "true" ]; then
#         gcloud functions deploy helloWorld123 \
#           --runtime nodejs20 \
#           --trigger-http \
#           --allow-unauthenticated \
#           --region=us-central1 \
#           --source=cloudFunction \
#           --gen2 \
#           --entry-point=hey \
#           --service-account=application-integration-test@my-project-1553458465069.iam.gserviceaccount.com
#       else
#         echo "Skipping deployment as no changes detected in cloud-function folder."
#       fi

- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # get the necessary secrets from the Secret Manager
      export SALESFORCE_SECRET_VALUE="helloworld"

      gcloud functions deploy testing123 \
      --runtime nodejs20 \
      --trigger-http \
      --allow-unauthenticated \
      --region=us-central1 \
      --source=cloudFunction \
      --gen2 \
      --entry-point=hey \
      --set-env-vars YOUR_ENV_VAR_NAME="$SALESFORCE_SECRET_VALUE"

# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   entrypoint: 'bash'
#   args:
#   - '-c'
#   - |


#     # Deploy the Cloud Function
    # gcloud functions deploy testing123 \
    #   --runtime nodejs20 \
    #   --trigger-http \
    #   --allow-unauthenticated \
    #   --region=us-central1 \
    #   --source=cloudFunction \
    #   --gen2 \
    #   --entry-point=hey \
    #   --set-env-vars YOUR_ENV_VAR_NAME=${SALESFORCE_SECRET_VALUE}

options:
  logging: CLOUD_LOGGING_ONLY
  # defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
# availableSecrets:
#   secretManager:
#   - versionName: projects/$PROJECT_ID/secrets/$_PASSWORD_SECRET_NAME/versions/latest
#     env: 'WEBHOOK_URL'
#   - versionName: projects/$PROJECT_ID/secrets/$_USERNAME_SECRET_NAME/versions/latest
#     env: 'USERNAME'